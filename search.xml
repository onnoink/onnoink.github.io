<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis源码阅读：大纲</title>
      <link href="/2021/12/31/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%A4%A7%E7%BA%B2/"/>
      <url>/2021/12/31/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<p>博客是《极客时间》上《Redis源码剖析与实战》课程的学习笔记，同时也基于评论和Redis实际源码补充了一些个人的观点。代码基于Redis 5.0.13。系列文章的大纲和链接如下</p><h3 id="Redis源码概览"><a href="#Redis源码概览" class="headerlink" title="Redis源码概览"></a>Redis源码概览</h3><p>代码概览从代码结构和模块组成对Redis源码进行整体角度的分析，使我们在后面具体内容的学习中整游刃有余。</p><ol><li><a href="https://onno.ink/2021/12/06/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80-Redis%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88/">《Redis源码阅读(一)：Redis源码结构概览》</a></li></ol><h3 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h3><p>数据类型部分的文章主要介绍Redis的五种数据类型<code>STRING</code>,<code>LIST</code>,<code>HASH</code>,<code>SET</code>,<code>ZSET</code>的底层结构和编码方式，了解Redis的底层数据结构在衡量<code>高效</code>和<code>内存节省</code>之后的实现方式。</p><p>该部分文章首先介绍<code>STRING</code>,<code>HASH</code>两种Redis使用的数据类型对应的底层结构，基于这两种数据类型，Redis实现了整个数据库数据<code>基础存储结构</code>的实现，Redis本身是一个基于<code>哈希表</code>的<code>键值</code>类型的数据库,<code>STRING</code>类型是<code>哈希表</code>结构的<code>键</code>,<code>HASH</code>是<code>哈希表</code>数据结构实现，所以在学习余下三种数据类型之前，先了解Redis数据库<code>哈希表</code>的组成结构和关键的<code>RedisObject</code>数据结构。然后我们按部就班的了解余下的<code>ZSET</code>,<code>LIST</code>,<code>SET</code>数据类型。同时还会了解新的<code>STREAM</code>类型相关信息</p><ol start="2"><li><a href="https://onno.ink/2021/12/07/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2SDS%EF%BC%8CSTRING%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84/">《Redis源码阅读(二)：简单动态字符串SDS，STRING类型的底层结构》</a></li><li><a href="https://onno.ink/2021/12/13/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%89-%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8CREDIS%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/">《Redis源码阅读(三)：哈希表，Redis数据库的存储结构》</a></li><li><a href="https://onno.ink/2021/12/20/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%9B%9B-RedisObject%EF%BC%8CRedis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%BC%96%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0/">《Redis源码阅读(四)：RedisObject，Redis数据类型不同编码的实现》</a></li><li><a href="http://onno.ink/">《Redis源码阅读(五)：SET类型的多种类型的不同编码》</a></li><li><a href="http://onno.ink/">《Redis源码阅读(六)：ZSET如何实现O(1)的ZSCORE命令》</a></li><li><a href="http://onno.ink/">《Redis源码阅读(七)：LIST为什么从LinkedList变为QuickList》</a></li><li><a href="http://onno.ink/">《Redis源码阅读(八)：STREAM的RedixTree是什么》</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis源码阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS协议详解</title>
      <link href="/2021/12/28/DNS%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/12/28/DNS%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s:Pod(三)</title>
      <link href="/2021/12/21/k8s-Pod-%E4%B8%89/"/>
      <url>/2021/12/21/k8s-Pod-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s:容器技术(二)</title>
      <link href="/2021/12/21/k8s-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF-%E4%BA%8C/"/>
      <url>/2021/12/21/k8s-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s:容器历史(一)</title>
      <link href="/2021/12/21/k8s-%E5%AE%B9%E5%99%A8%E5%8E%86%E5%8F%B2-%E4%B8%80/"/>
      <url>/2021/12/21/k8s-%E5%AE%B9%E5%99%A8%E5%8E%86%E5%8F%B2-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis源码阅读(四)：RedisObject，Redis数据类型不同编码的实现</title>
      <link href="/2021/12/20/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%9B%9B-RedisObject%EF%BC%8CRedis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%BC%96%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/12/20/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%9B%9B-RedisObject%EF%BC%8CRedis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%BC%96%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客是《极客时间》上《Redis源码剖析与实战》课程的学习笔记，同时也基于评论和Redis实际源码补充了一些个人的观点。代码基于Redis 5.0.13</p></blockquote><p>前面两篇文章介绍了Redis的数据结构<code>dict</code>哈希表，以及<code>dict</code>使用的<code>渐进式rehash</code>和<code>SDS</code>简单动态字符串以及<code>SDS</code>对应的不同的节省内存的<code>SDS</code>数据结构。</p><p>Redis是一个<code>键值对</code>数据库，基于<code>dict</code>的哈希表来组织数据，<code>键</code>是<code>SDS</code>的数据类型，<code>值</code>是<code>dictEntry</code>数据类型，Redis拥有多种数据类型，包含</p><ul><li>字符串 STRING</li><li>列表 LIST</li><li>Hash HASH</li><li>集合 SET</li><li>有续集和 SORTED SET</li></ul><p>不同的数据类型的<code>底层数据结构</code>在数据元素和大小不同的情况下也是不同的，那么Redis基于<code>dictEntry</code>的数据结构,是如何指向不同的<code>底层数据结构</code>以及表示不同的<code>数据类型</code>的呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictEntry &#123;</span><br><span class="line">    void *key;</span><br><span class="line">    union &#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        int64_t s64;</span><br><span class="line">        double d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    struct dictEntry *next;</span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><p>上面的<code>dictEntry</code>包含一个<code>union</code>联合体，其中包含一个指针类型<code>*val</code>，在<code>Redis数据库</code>使用的<code>哈希表</code>中，指向<code>redisObject</code>结构体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisObject &#123;</span><br><span class="line">    unsigned type:4;</span><br><span class="line">    unsigned encoding:4;</span><br><span class="line">    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or</span><br><span class="line">                            * LFU data (least significant 8 bits frequency</span><br><span class="line">                            * and most significant 16 bits access time). */</span><br><span class="line">    int refcount;</span><br><span class="line">    void *ptr;</span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><ul><li>type: redisObject 的数据类型，是应用程序在 Redis 中保存的数据类型，包括 String、List、Hash 等。</li><li>encoding: redisObject 的编码类型，是 Redis 内部实现各种数据类型所用的数据结构。</li><li>lru: redisObject 的 LRU 时间。</li><li>refcount: redisObject 的引用计数。</li><li>ptr: 指向值的指针</li></ul><blockquote><p>注意，上面定义中，<code>type 4bits</code>+<code>encoding 4bits</code>+<code>lru 24bits</code>=<code>32 bites</code>，也就是<code>4 bytes</code>，在实战篇会讲解为什么存很短的字符串也会占用很多空间的案例</p></blockquote><p>通过<code>type</code>属性，可以区分对应的<code>数据类型</code>，通过<code>encoding</code>属性可以区分<code>数据类型</code>的<code>底层结构</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#define OBJ_ENCODING_RAW 0     /* Raw representation */</span><br><span class="line">#define OBJ_ENCODING_INT 1     /* Encoded as integer */</span><br><span class="line">#define OBJ_ENCODING_HT 2      /* Encoded as hash table */</span><br><span class="line">#define OBJ_ENCODING_ZIPMAP 3  /* Encoded as zipmap */</span><br><span class="line">#define OBJ_ENCODING_LINKEDLIST 4 /* No longer used: old list encoding. */</span><br><span class="line">#define OBJ_ENCODING_ZIPLIST 5 /* Encoded as ziplist */</span><br><span class="line">#define OBJ_ENCODING_INTSET 6  /* Encoded as intset */</span><br><span class="line">#define OBJ_ENCODING_SKIPLIST 7  /* Encoded as skiplist */</span><br><span class="line">#define OBJ_ENCODING_EMBSTR 8  /* Embedded sds string encoding */</span><br><span class="line">#define OBJ_ENCODING_QUICKLIST 9 /* Encoded as linked list of ziplists */</span><br><span class="line">#define OBJ_ENCODING_STREAM 10 /* Encoded as a radix tree of listpacks */</span><br></pre></td></tr></table></figure><h4 id="STRING"><a href="#STRING" class="headerlink" title="STRING"></a>STRING</h4><p>字符串类型的<code>RedisObject</code>包含一下三种编码类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define OBJ_ENCODING_RAW 0     /* Raw representation */</span><br><span class="line">#define OBJ_ENCODING_INT 1     /* Encoded as integer */</span><br><span class="line">#define OBJ_ENCODING_EMBSTR 8  /* Embedded sds string </span><br></pre></td></tr></table></figure><p>默认接收到客户端传输的字符串的编码类型都是<code>OBJ_ENCODING_RAW</code>，过函数<code>tryObejctEncoding</code>后，会根据不同条件选择使用不同的编码类型</p><blockquote><p>共享对象是Redis用来节省内存占用和对象反复创建的一种手段，创建常用的对象为共享对象，例如<code>字符串对象&quot;OK&quot;</code>经常在服务端响应中用到，为了避免反复在内存中创建这个<code>字符串对象</code>， Redis把常用的对象创建为共享对象，需要的时候直接引用共享对象即可。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">robj *tryObjectEncoding(robj *o) &#123;</span><br><span class="line">    long value;</span><br><span class="line">    sds s = o-&gt;ptr;</span><br><span class="line">    size_t len;</span><br><span class="line"></span><br><span class="line">    /* Make sure this is a string object, the only type we encode</span><br><span class="line">     * in this function. Other types use encoded memory efficient</span><br><span class="line">     * representations but are handled by the commands implementing</span><br><span class="line">     * the type. */</span><br><span class="line">    serverAssertWithInfo(NULL,o,o-&gt;type == OBJ_STRING);</span><br><span class="line"></span><br><span class="line">    /* We try some specialized encoding only for objects that are</span><br><span class="line">     * RAW or EMBSTR encoded, in other words objects that are still</span><br><span class="line">     * in represented by an actually array of chars. */</span><br><span class="line">    if (!sdsEncodedObject(o)) return o;</span><br><span class="line"></span><br><span class="line">    /* It&#x27;s not safe to encode shared objects: shared objects can be shared</span><br><span class="line">     * everywhere in the &quot;object space&quot; of Redis and may end in places where</span><br><span class="line">     * they are not handled. We handle them only as values in the keyspace. */</span><br><span class="line">     if (o-&gt;refcount &gt; 1) return o;</span><br><span class="line"></span><br><span class="line">    /* Check if we can represent this string as a long integer.</span><br><span class="line">     * Note that we are sure that a string larger than 20 chars is not</span><br><span class="line">     * representable as a 32 nor 64 bit integer. */</span><br><span class="line">    len = sdslen(s);</span><br><span class="line">    if (len &lt;= 20 &amp;&amp; string2l(s,len,&amp;value)) &#123;</span><br><span class="line">        /* This object is encodable as a long. Try to use a shared object.</span><br><span class="line">         * Note that we avoid using shared integers when maxmemory is used</span><br><span class="line">         * because every object needs to have a private LRU field for the LRU</span><br><span class="line">         * algorithm to work well. */</span><br><span class="line">        if ((server.maxmemory == 0 ||</span><br><span class="line">            !(server.maxmemory_policy &amp; MAXMEMORY_FLAG_NO_SHARED_INTEGERS)) &amp;&amp;</span><br><span class="line">            value &gt;= 0 &amp;&amp;</span><br><span class="line">            value &lt; OBJ_SHARED_INTEGERS)</span><br><span class="line">        &#123;</span><br><span class="line">            decrRefCount(o);</span><br><span class="line">            incrRefCount(shared.integers[value]);</span><br><span class="line">            return shared.integers[value];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (o-&gt;encoding == OBJ_ENCODING_RAW) &#123;</span><br><span class="line">                sdsfree(o-&gt;ptr);</span><br><span class="line">                o-&gt;encoding = OBJ_ENCODING_INT;</span><br><span class="line">                o-&gt;ptr = (void*) value;</span><br><span class="line">                return o;</span><br><span class="line">            &#125; else if (o-&gt;encoding == OBJ_ENCODING_EMBSTR) &#123;</span><br><span class="line">                decrRefCount(o);</span><br><span class="line">                return createStringObjectFromLongLongForValue(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* If the string is small and is still RAW encoded,</span><br><span class="line">     * try the EMBSTR encoding which is more efficient.</span><br><span class="line">     * In this representation the object and the SDS string are allocated</span><br><span class="line">     * in the same chunk of memory to save space and cache misses. */</span><br><span class="line">    if (len &lt;= OBJ_ENCODING_EMBSTR_SIZE_LIMIT) &#123;</span><br><span class="line">        robj *emb;</span><br><span class="line"></span><br><span class="line">        if (o-&gt;encoding == OBJ_ENCODING_EMBSTR) return o;</span><br><span class="line">        emb = createEmbeddedStringObject(s,sdslen(s));</span><br><span class="line">        decrRefCount(o);</span><br><span class="line">        return emb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* We can&#x27;t encode the object...</span><br><span class="line">     *</span><br><span class="line">     * Do the last try, and at least optimize the SDS string inside</span><br><span class="line">     * the string object to require little space, in case there</span><br><span class="line">     * is more than 10% of free space at the end of the SDS string.</span><br><span class="line">     *</span><br><span class="line">     * We do that only for relatively large strings as this branch</span><br><span class="line">     * is only entered if the length of the string is greater than</span><br><span class="line">     * OBJ_ENCODING_EMBSTR_SIZE_LIMIT. */</span><br><span class="line">    trimStringObjectIfNeeded(o);</span><br><span class="line"></span><br><span class="line">    /* Return the original object. */</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如果<code>RedisObject</code>的<code>引用计数 &gt; 1</code>，表明当前的<code>RedisObject</code>是一个<code>共享对象</code>，在多处被共享，共享对象的修改是不安全的，直接返回原始对象，也就是<code>OBJ_ENCODING_RAW</code>编码类型。</li><li>如果长度<code>小于等于20</code>并且内容是一个<code>long类型</code>内存，如果<code>可以使用共享对象()</code>则可以使用<code>共享对象池</code>中对应的<code>OBJ_ENCODING_INT</code>编码的共享对象</li></ol><h4 id="LIST"><a href="#LIST" class="headerlink" title="LIST"></a>LIST</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define OBJ_ENCODING_QUICKLIST 9 /* Encoded as linked list of ziplists */</span><br></pre></td></tr></table></figure><h4 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define OBJ_ENCODING_ZIPLIST 5 /* Encoded as ziplist */</span><br><span class="line">#define OBJ_ENCODING_HT 2      /* Encoded as hash table */</span><br></pre></td></tr></table></figure><h4 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define OBJ_ENCODING_INTSET 6  /* Encoded as intset */</span><br><span class="line">#define OBJ_ENCODING_HT 2      /* Encoded as hash table */</span><br></pre></td></tr></table></figure><h4 id="ZSET"><a href="#ZSET" class="headerlink" title="ZSET"></a>ZSET</h4>]]></content>
      
      
      <categories>
          
          <category> Redis源码阅读系列文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存二三事</title>
      <link href="/2021/12/16/%E7%BC%93%E5%AD%98%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
      <url>/2021/12/16/%E7%BC%93%E5%AD%98%E4%BA%8C%E4%B8%89%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis源码阅读(三)：哈希表，Redis数据库的存储结构</title>
      <link href="/2021/12/13/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%89-%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8CREDIS%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2021/12/13/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%89-%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8CREDIS%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客是《极客时间》上《Redis源码剖析与实战》课程的学习笔记，同时也基于评论和Redis实际源码补充了一些个人的观点。代码基于Redis 5.0.13</p></blockquote><p>上节课学习了Redis<code>简单动态字符串SDS</code>，我们提到Redis数据库键值对的键都是SDS类型，这个键值对结构就是今天要学的hash表数据结构。</p><h3 id="哈希表-HashTable"><a href="#哈希表-HashTable" class="headerlink" title="哈希表 HashTable"></a>哈希表 HashTable</h3><p><code>哈希表(HashTable)</code>一般是一个数组结构，数组中每个元素是一个<code>哈希桶(bucket)</code>,要存入<code>哈希表</code>的数据通过<code>hash算法</code>得到一个<code>整数哈希值(HashCode)</code>,然后对<code>数组元素个数</code>进行<code>取模</code>运算得到元素在<code>哈希表</code>中的位置，也就是所对应的<code>哈希桶(bucket)</code>的位置,存入元素。</p><p><img src="/2021/12/13/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%89-%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%8CREDIS%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/08ac157a8fbf4d22f8a5217bfea79a2f.jpeg" alt="hashtable"></p><h4 id="哈希表的优势"><a href="#哈希表的优势" class="headerlink" title="哈希表的优势"></a>哈希表的优势</h4><p>哈希表基于数组结构，数组结构有一个优势是随机读取指定索引位置的时间复杂度是O(1),所以基于在数组中随机读取指定位置的元素的时间复杂度是O(1)，所以键值对查找是哈希表的优势。</p><h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p><code>哈希函数</code>对要存入哈希表的元素的<code>key</code>进行<code>hash计算</code>后，生成对应的<code>hashcode</code>,从哈希表的结构我们看出，如果不同元素得到的<code>hashcode</code>比较<code>分散</code>，这样元素就能分散的插入到不同的<code>bucket</code>内，但是如果哈希函数的产生的<code>hashcode</code>比较集中，就会导致元素堆积在<code>部分bucket</code>范围内，造成<code>hash表</code>元素分布不均匀，产生<code>哈希冲突</code>的可能性大大增加。</p><h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><p>因为哈希表是把<code>无限的元素映射到有限的空间内</code>，所以必然会出现多个元素映射到同一个位置的情况，就是<code>hash冲突</code>,也就是不同的元素通过<code>hash函数</code>得到的<code>hash值</code>经过取模运算后，最终可能指向同一个<code>bucket</code>。</p><p>解决<code>hash冲突</code>的常用方法有很多，<code>链表法</code>和<code>开放寻址法</code>,<code>再hash法</code>,<code>建立公共溢出区</code>等</p><h5 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h5><p>开放寻址法，插入新元素产生hash冲突的时候，按顺序往后查找<code>bucket</code>直到找到一个<code>bucket</code>为空的时候，把元素存入该位置，同样查找元素的时候，对比如果key和查找不一致，则按顺序往后查找直到找到一个元素<code>key</code>的要查找的元素一样，则返回。这种方法在<code>hash负载</code>比较高的时候，最差的时间复杂度可能为O(n),已经很少被人使用了。</p><h5 id="链表法"><a href="#链表法" class="headerlink" title="链表法"></a>链表法</h5><p><code>hash表</code>的<code>bucket</code>存储的不再是单个元素，而是<code>链表</code>，产生<code>hash冲突</code>的元素通过链表链接在同一个<code>bucket</code>内，这样插入新的元素的时候，如果当前<code>bucket</code>已经存在元素了，则把要插入的元素加入到链表中。</p><h5 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h5><p>负载因子是评价哈希表当前负载情况的一个标准，算法是用<code>hash表内元素的总数</code>/<code>哈希表哈希桶的个数</code>，负载因子代表哈希表当前的负载程度，负载因子越大，产生哈希冲突的可能性越大</p><h3 id="Redis的哈希表"><a href="#Redis的哈希表" class="headerlink" title="Redis的哈希表"></a>Redis的哈希表</h3><p>redis和哈希表相关的内容在<code>dict.h</code>,<code>dict.c</code>文件中,redis使用<code>dictht</code>数据结构代表哈希表数据结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictht &#123;</span><br><span class="line">    dictEntry **table; //二维数组</span><br><span class="line">    unsigned long size; //Hash表大小</span><br><span class="line">    unsigned long sizemask; // size掩码</span><br><span class="line">    unsigned long used; // 已经使用的大小</span><br><span class="line">&#125; dictht;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>哈希表中每一元素都是一个<code>dictEntry</code>数据结构，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">typedef struct dictEntry &#123;</span><br><span class="line">    void *key;</span><br><span class="line">    union &#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        int64_t s64;</span><br><span class="line">        double d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    struct dictEntry *next;</span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><p>看一看出<code>dictEntry</code>都有一个<code>next</code>指针，所以实际redis解决哈希冲突的方式是通过链表法解决。实际上为了实现哈希表的自动扩容，redis中的哈希表并不直接使用<code>dictht</code>而是使用<code>dict</code>这个数据结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dict &#123;</span><br><span class="line">    dictType *type; // 类型</span><br><span class="line">    void *privdata; // 私有数据，type函数的参数</span><br><span class="line">    dictht ht[2];   // 包含2个dictht的长度为2的数组</span><br><span class="line">    long rehashidx; // rehash时候当前进度，也就是当前rehash到了哪个bucket</span><br><span class="line">    unsigned long iterators; // 当前正在执行的迭代器的数量</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><p>redis全局数据库也是一个<code>dict</code>结构，redis使用<code>dict</code>实现<code>渐进式rehash</code></p><h4 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h4><p>上面讲过哈希冲突和负载因子，随着负载因子的增长，哈希表产生哈希冲突的概率越来越大，哈希表的查找元素效率越来月底，就需要对hash进行扩容，称之为<code>rehash</code>，常规的操作是申请一个新的数组，大小是<code>当前元素数量</code>的<code>2倍</code>大小,然后迁移旧的<code>哈希表</code>的数据，根据<code>新的哈希表</code>的<code>bucket数量</code>重新计算所在的<code>bucket的位置</code>并存入，如果一次性进行这些操作时间复杂度是O(n)。</p><p>我们直到<code>redis是单线程</code>的高性能的键值数据库，如果在主线程中执行<code>rehash</code>操作，会阻塞主线程，所以redis采用特别的<code>渐进式rehash</code>进行数据迁移</p><h5 id="触发渐进式rehash的条件"><a href="#触发渐进式rehash的条件" class="headerlink" title="触发渐进式rehash的条件"></a>触发渐进式rehash的条件</h5><p>redis在什么情况下会触发渐进式rehash呢？上面其实我们说过，哈希表进行rehash和负载因子有关，我们看<code>_dictExpandIfNeeded</code>方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">static int _dictExpandIfNeeded(dict *d)</span><br><span class="line">&#123;</span><br><span class="line">    /* Incremental rehashing already in progress. Return. */</span><br><span class="line">    if (dictIsRehashing(d)) return DICT_OK;</span><br><span class="line"></span><br><span class="line">    /* If the hash table is empty expand it to the initial size. */</span><br><span class="line">    if (d-&gt;ht[0].size == 0) return dictExpand(d, DICT_HT_INITIAL_SIZE);</span><br><span class="line"></span><br><span class="line">    /* If we reached the 1:1 ratio, and we are allowed to resize the hash</span><br><span class="line">     * table (global setting) or we should avoid it but the ratio between</span><br><span class="line">     * elements/buckets is over the &quot;safe&quot; threshold, we resize doubling</span><br><span class="line">     * the number of buckets. */</span><br><span class="line">    if (d-&gt;ht[0].used &gt;= d-&gt;ht[0].size &amp;&amp;</span><br><span class="line">        (dict_can_resize ||</span><br><span class="line">         d-&gt;ht[0].used/d-&gt;ht[0].size &gt; dict_force_resize_ratio))</span><br><span class="line">    &#123;</span><br><span class="line">        return dictExpand(d, d-&gt;ht[0].used*2);</span><br><span class="line">    &#125;</span><br><span class="line">    return DICT_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面说明一个已经初始化的哈希表触发<code>rehash</code>的条件是</p><ol><li>负载因子 &gt;= 1  &amp;&amp;  dict_can_resize标志是 true</li><li>负载因子 &gt; 5<br>如果<code>负载因子在1-5之间</code>，需要标志位<code>dict_can_resize</code>是<code>true</code>的时候可以进行，如果<code>负载因子&gt;5</code>,不用管标志位，强行进行。<br>上面控制<code>dict_can_resize</code>的函数分别是<code>dictEnableResize</code>和<code>dictDisableResize</code>，而调用这两个方法的函数在<code>server.m</code>里的<code>updateDictResizePolicy</code>方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void updateDictResizePolicy(void) &#123;</span><br><span class="line">    if (server.rdb_child_pid == -1 &amp;&amp; server.aof_child_pid == -1)</span><br><span class="line">        dictEnableResize();</span><br><span class="line">    else</span><br><span class="line">        dictDisableResize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这个函数调用 dictEnableResize 函数启用扩容功能的条件是：当前没有 RDB 子进程，并且也没有 AOF 子进程，为避免父进程大量写时复制。</li></ol><p>通过<code>_dictExpandIfNeeded</code>函数可以触发哈希表的<code>rehash</code>操作，哪什么时候会调用<code>_dictExpandIfNeeded</code>函数呢？函数<code>_dictExpandIfNeeded</code>被<code>_dictKeyIndex</code>函数调用，而该函数又被<code>dictAddRaw</code>调用,<code>dictAddRaw</code>又被<code>dictAdd</code>,<code>dictReplace</code>,<code>dictAddorFind</code>调用</p><ul><li>dictAdd：用来往 Hash 表中添加一个键值对。</li><li>dictRelace：用来往 Hash 表中添加一个键值对，或者键值对存在时，修改键值对。</li><li>dictAddorFind：直接调用 dictAddRaw。</li></ul><p>所以在对hash表进行元素的<code>增加</code>和<code>修改</code>会判断释放需要触发<code>rehash</code></p><h5 id="扩容多大"><a href="#扩容多大" class="headerlink" title="扩容多大"></a>扩容多大</h5><p>扩容函是<code>dictExpand</code>但是<code>_dictExpandIfNeeded</code>调用<code>dictExpand</code>的时候传入的参数是<code>d-&gt;ht[0].used*2</code>,最终通过<code>_dictNextPower</code>处理后得到扩展后的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#define DICT_HT_INITIAL_SIZE     4</span><br><span class="line">/* Our hash table capability is a power of two */</span><br><span class="line">static unsigned long _dictNextPower(unsigned long size)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned long i = DICT_HT_INITIAL_SIZE;</span><br><span class="line"></span><br><span class="line">    if (size &gt;= LONG_MAX) return LONG_MAX + 1LU;</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        if (i &gt;= size)</span><br><span class="line">            return i;</span><br><span class="line">        i *= 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以扩容的容量是 <code>x &gt;= d-&gt;ht[0].used*2 &amp;&amp;  x是2的n次方</code> 翻译过来就是<code>容量是</code>最接近<code>当前使用量 * 2</code>的<code>2的n次方</code>，并且<code>容量</code> &gt; 当前使用量 * 2</p><h5 id="如何进行渐进式rehash"><a href="#如何进行渐进式rehash" class="headerlink" title="如何进行渐进式rehash"></a>如何进行渐进式rehash</h5><p>redis进行rehash主要有两个方法</p><ul><li><code>dictRehash</code> 迁移哈希表的n个<code>bucket</code></li><li><code>_dictRehashStep</code> 迁移哈希表的1个<code>bucket</code></li></ul><p><code>_dictRehashStep</code>实际会调用<code>dictRehash</code>函数，只不过传入的<code>bucket</code>个数的参数是<code>1</code></p><p><code>dictRehash</code>会从<code>dict</code>的<code>rehashidx</code>属性对应的位置开始，迁移<code>n</code>个<code>非空bucket</code>内的所有元素到新的哈希表内，每次迁移后都会判断旧的哈希表的使用量是否为<code>0</code>如果为<code>0</code>则会用<code>ht[1]</code>的哈希表替换<code>ht[0]</code>的哈希表，重制ht[1]，并把<code>rehashidx</code>改为<code>-1</code>完成本轮<code>rehash</code></p><p><code>dictRehash</code>在进行迁移的过程中，可能会遇见多个连续的<code>空bucket</code>，有一个<code>empty_visits</code>递减计数器，每次遇见<code>空bucket</code>的时候<code>empty_visits</code>会减一，如果<code>empty_visits</code>减为0，则结束本轮rehash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">int dictRehash(dict *d, int n) &#123;</span><br><span class="line">    int empty_visits = n*10; /* Max number of empty buckets to visit. */</span><br><span class="line">    if (!dictIsRehashing(d)) return 0;</span><br><span class="line"></span><br><span class="line">    while(n-- &amp;&amp; d-&gt;ht[0].used != 0) &#123;</span><br><span class="line">        dictEntry *de, *nextde;</span><br><span class="line"></span><br><span class="line">        /* Note that rehashidx can&#x27;t overflow as we are sure there are more</span><br><span class="line">         * elements because ht[0].used != 0 */</span><br><span class="line">        assert(d-&gt;ht[0].size &gt; (unsigned long)d-&gt;rehashidx);</span><br><span class="line">        while(d-&gt;ht[0].table[d-&gt;rehashidx] == NULL) &#123;</span><br><span class="line">            d-&gt;rehashidx++;</span><br><span class="line">            if (--empty_visits == 0) return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        de = d-&gt;ht[0].table[d-&gt;rehashidx];</span><br><span class="line">        /* Move all the keys in this bucket from the old to the new hash HT */</span><br><span class="line">        while(de) &#123;</span><br><span class="line">            uint64_t h;</span><br><span class="line"></span><br><span class="line">            nextde = de-&gt;next;</span><br><span class="line">            /* Get the index in the new hash table */</span><br><span class="line">            h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[1].sizemask;</span><br><span class="line">            de-&gt;next = d-&gt;ht[1].table[h];</span><br><span class="line">            d-&gt;ht[1].table[h] = de;</span><br><span class="line">            d-&gt;ht[0].used--;</span><br><span class="line">            d-&gt;ht[1].used++;</span><br><span class="line">            de = nextde;</span><br><span class="line">        &#125;</span><br><span class="line">        d-&gt;ht[0].table[d-&gt;rehashidx] = NULL;</span><br><span class="line">        d-&gt;rehashidx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Check if we already rehashed the whole table... */</span><br><span class="line">    if (d-&gt;ht[0].used == 0) &#123;</span><br><span class="line">        zfree(d-&gt;ht[0].table);</span><br><span class="line">        d-&gt;ht[0] = d-&gt;ht[1];</span><br><span class="line">        _dictReset(&amp;d-&gt;ht[1]);</span><br><span class="line">        d-&gt;rehashidx = -1;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* More to rehash... */</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次迁移一个<code>非空bucket</code>的<code>_dictRehashStep</code>被<code>dictAddRaw</code>，<code>dictGenericDelete</code>，<code>dictFind</code>，<code>dictGetRandomKey</code>，<code>dictGetSomeKeys</code>调用。<br><code>dictAddRaw</code> 和 <code>dictGenericDelete</code> 函数，分别对应了往 Redis 中增加和删除键值对，而后三个函数则对应了在 Redis 中进行查询操作。这样一来，每次迁移完一个 bucket，Hash 表就会执行正常的增删查请求操作，这就是在代码层面实现渐进式 rehash 的方法。</p><p>另外除了每次<code>增删查</code>会进行渐进式<code>rehash</code>外，还有一个定时定时 rehash：如果 dict 一直没有操作，无法渐进式迁移数据，那主线程会默认每间隔 100ms 执行一次迁移操作。这里一次会以 100 个桶为基本单位迁移数据，并限制如果一次操作耗时超时 1ms 就结束本次任务，待下次再次触发迁移（详见 dict.c 的 dictRehashMilliseconds 函数）</p><p>dict 在 rehash 期间，查询旧哈希表找不到结果，还需要在新哈希表查询一次，新的数据只会插入新的<code>哈希表</code>内，因为查找索引的<code>_dictKeyIndex</code>方法在<code>rehash</code>的时候会返回<code>ht[1]</code>的索引位置</p>]]></content>
      
      
      <categories>
          
          <category> Redis源码阅读系列文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件系统缓存详解</title>
      <link href="/2021/12/10/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/12/10/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Target: 了解基于Linux的文件系统的底层逻辑和原理，常说的强制sync和异步sync的方式</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis源码阅读(二)：简单动态字符串SDS，STRING类型的底层结构</title>
      <link href="/2021/12/07/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2SDS%EF%BC%8CSTRING%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84/"/>
      <url>/2021/12/07/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2SDS%EF%BC%8CSTRING%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客是《极客时间》上《Redis源码剖析与实战》课程的学习笔记，同时也基于评论和Redis实际源码补充了一些个人的观点。代码基于Redis 5.0.13</p></blockquote><h3 id="常用的字符串的特性"><a href="#常用的字符串的特性" class="headerlink" title="常用的字符串的特性"></a>常用的字符串的特性</h3><p>字符串在一些<code>高级语言</code>中表示使用单引号<code>&#39;</code>或者双引号<code>&quot;</code>包裹范围内的字符信息，在<code>C语言</code>中使用字符数组表示字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// PHP</span><br><span class="line">$a = &quot;nihao&quot;;</span><br><span class="line"></span><br><span class="line">// Go </span><br><span class="line">a := &quot;xxxxxx&quot;</span><br><span class="line"></span><br><span class="line">// C</span><br><span class="line">char *s = &quot;redis&quot;</span><br></pre></td></tr></table></figure><p>基本所有语言都包含对字符串类型的描述，在使用上，常用字符串操作包括<code>获取长度</code>，<code>拼接</code>，<code>比较</code>等等操作。</p><h3 id="Redis字符串有什么要求"><a href="#Redis字符串有什么要求" class="headerlink" title="Redis字符串有什么要求"></a>Redis字符串有什么要求</h3><h4 id="丰富高效的字符串操作"><a href="#丰富高效的字符串操作" class="headerlink" title="丰富高效的字符串操作"></a>丰富高效的字符串操作</h4><p>字符串除了作为Redis支持的一种数据类型外，在Redis内部的各种地方都会使用Redis，例如Redis简直数据库的<code>键</code>的类型都是字符串类型，客户端发送的请求命令，也是字符串类型，所以Redis的字符串要支持高效的字符串操作才能支撑这些应用场景。</p><h4 id="二进制安全，能保存任意的二进制"><a href="#二进制安全，能保存任意的二进制" class="headerlink" title="二进制安全，能保存任意的二进制"></a>二进制安全，能保存任意的二进制</h4><p>Redis字符串包含的内容各异，有图片文件的二进制形式，有纯文本等等，C语言本身的字符串类型<code>字符串数组</code>使用<code>\0</code>作为字符串的结尾，基于这种规则，C语言自带的字符串操作函数，都会把<code>\0</code>当作结束信号，例如获取字符串长度的时候，会再读取到<code>\0</code>的时候结束读取，返回已经读取的字符串的长度。<br><img src="/2021/12/07/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8C-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2SDS%EF%BC%8CSTRING%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84/1640933063048.jpg" alt="C语言字符串数组"><br>如上所示的字符串在计算字符串长度的时候会在第一个<code>\0</code>的地方结束计算，结果为<code>5</code>，称之为<code>二进制不安全</code>的。<br>所以Redis的字符串需要<code>二进制安全</code></p><h4 id="尽可能节省内存开销"><a href="#尽可能节省内存开销" class="headerlink" title="尽可能节省内存开销"></a>尽可能节省内存开销</h4><p>Redis是一个内存型数据库，内存相比硬盘资源是比较珍贵的资源，所以Redis的字符串类型要尽可能的节省内存。</p><h3 id="为什么不用C语言字符串？"><a href="#为什么不用C语言字符串？" class="headerlink" title="为什么不用C语言字符串？"></a>为什么不用C语言字符串？</h3><p>通过上面的分析，我们知道<code>C语言</code>字符串不能满足Redis字符串的要求，主要有一下原因。</p><h4 id="不是二进制安全的"><a href="#不是二进制安全的" class="headerlink" title="不是二进制安全的"></a>不是二进制安全的</h4><p>C语言自带的字符串不是二进制安全的，不能够用来保存二进制数据，C中自带的字符串中用<code>\0</code>结尾，无法保存带<code>\0</code>的二进制数据。</p><h4 id="字符串操作复杂度高"><a href="#字符串操作复杂度高" class="headerlink" title="字符串操作复杂度高"></a>字符串操作复杂度高</h4><p>因为<code>C语言</code>使用<code>字符数组</code>作为字符串的底层存储方式，所以在例如<code>获取字符串长度</code>，<code>字符串拼接</code>等字符串操作的时候，都需要<code>遍历整个字符串</code>获取字符串对应的长度等信息。这些都是<code>O(n)</code>级别的时间复杂度。</p><h5 id="内存的频繁分配和释放"><a href="#内存的频繁分配和释放" class="headerlink" title="内存的频繁分配和释放"></a>内存的频繁分配和释放</h5><p><code>C语言</code>字符串并不会预留空间，每次字符串的长度变化都需要频繁的分配和释放内存。</p><h3 id="SDS设计哲学"><a href="#SDS设计哲学" class="headerlink" title="SDS设计哲学"></a>SDS设计哲学</h3><p>综合上面的对Rdis字符串的要求的描述和C语言字符串不支持的点的描述，Redis设计了一个新的字符串存储结构<code>SDS简单动态字符串</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct __attribute__ ((__packed__)) sdshdr##T &#123;</span><br><span class="line">    uint##T_t len; /* used */</span><br><span class="line">    uint##T_t alloc; /* excluding the header and null terminator */</span><br><span class="line">    unsigned char flags; /* 3 lsb of type， 5 unused bits */</span><br><span class="line">    char buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面结构体包含<code>当前字符串长度len(不包含\0)</code>，<code>当前sds字符串分配的长度(alloc)</code>，<code>当前字符串的类型flags</code>，<code>字符串数组</code></p><p>同时Redis还给<code>char*</code>起了一个新的别名<code>sds</code>，同时创建了很多对sds进行操作的函数，Redis虽然创建了一个新的数据结构，但是创建sds返回的仍然是结构体里的buf字节数组，便于复用一些<code>C语言</code>的字符串操作。</p><h4 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h4><p><code>sds</code>使用结构体内置的<code>alloc</code>和<code>len</code>字段读取字符串的实际长度，所以是二进制安全的。</p><h4 id="节省内存"><a href="#节省内存" class="headerlink" title="节省内存"></a>节省内存</h4><p>为了达到节省内存的目的，Redis设计了针对不同字符串长度大小不同的<code>SDS</code>字符串的头信息结构<code>sdshdr5(不再使用)</code>，<code>sdshdr8</code>，<code>sdshdr16</code>，<code>sdshdr32</code>，<code>sdshdr64</code>。不同类型的<code>sds结构体</code>区别是记录字符串长度的无符号整型的<code>alloc</code>位数的不同，例如<code>sdshdr16</code>的<code>alloc</code>是一个<code>uint16</code>的无符号整数，所以能表达的最数字是<code>2^16 - 1</code>，所以<code>sdshdr16</code>能存储的最大的字符串的长度为<code>2^16 - 1</code>。这种设计避免了过短的字符串的头信息占用过多内存。</p><blockquote><p>经常有人问Redis最大能存多大，官方文档表达是最大是512M，但是<code>sdshdr64</code>明显能够表达更长，估计是考虑32位主机无法使用<code>sdshdr64</code>，所以使用<code>sdshdr32</code>的字符串最大长度<code>2^32-1</code></p></blockquote><blockquote><p><strong>attribute</strong> ((<strong>packed</strong>))让内存采用紧凑的方式分配内存， 这样不会按照8字节对齐，可以防止内存对齐带来的内存浪费。</p></blockquote><h4 id="提升操作效率"><a href="#提升操作效率" class="headerlink" title="提升操作效率"></a>提升操作效率</h4><p>上面提到C语言自带的字符串操作效率低，通过使用sds，字符串的<code>长度函数</code>函数可以直接从头部信息的<code>len</code>获取，时间复杂度从<code>O(n)</code>变为了<code>O(1)</code></p><p>例如字符串拼接操作<br>使用C语言的字符串，首先要以O(n)的时间复杂度遍历字符串获取长度，然后再为字符串申请额外空间，再遍历要加入的字符串，拼接到目标字符串的尾部。</p><p>如果使用<code>SDS</code>进行字符串拼接，调用<code>sdscatlen</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sds sdscatlen(sds s, const void *t, size_t len) &#123;</span><br><span class="line">    //获取目标字符串s的当前长度</span><br><span class="line">    size_t curlen = sdslen(s);</span><br><span class="line">    //根据要追加的长度len和目标字符串s的现有长度，判断是否要增加新的空间</span><br><span class="line">    s = sdsMakeRoomFor(s,len);</span><br><span class="line">    if (s == NULL) return NULL;</span><br><span class="line">    //将源字符串t中len长度的数据拷贝到目标字符串结尾</span><br><span class="line">    memcpy(s+curlen, t, len);</span><br><span class="line">    //设置目标字符串的最新长度：拷贝前长度curlen加上拷贝长度</span><br><span class="line">    sdssetlen(s, curlen+len);</span><br><span class="line">    //拷贝后，在目标字符串结尾加上\0</span><br><span class="line">    s[curlen+len] = &#x27;\0&#x27;;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先，获取目标字符串的当前长度，并调用 <code>sdsMakeRoomFor</code> 函数，根据当前长度和要追加的长度，判断是否要给目标字符串新增空间。这一步主要是保证，目标字符串有足够的空间接收追加的字符串。</li><li>其次，在保证了目标字符串的空间足够后，将源字符串中指定长度 len 的数据追加到目标字符串。</li><li>最后，设置目标字符串的最新长度。</li></ul><p>省去了遍历字符串的操作，同时通过额外字段存储<code>len</code>和<code>alloc</code>，可以提前分配部分空间，<code>免去每次释放和分配内存</code>的复杂工作</p><h5 id="SDS的扩容的规则"><a href="#SDS的扩容的规则" class="headerlink" title="SDS的扩容的规则"></a>SDS的扩容的规则</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define SDS_MAX_PREALLOC (1024*1024)</span><br><span class="line"></span><br><span class="line">if (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class="line">    newlen *= 2;</span><br><span class="line">else</span><br><span class="line">    newlen += SDS_MAX_PREALLOC;</span><br></pre></td></tr></table></figure><ul><li>如果新的字符串的<code>小于1M</code>，则扩容为新的字符串的<code>2倍大小</code></li><li>如果新的字符串的<code>大于等于1M</code>，则扩容为新的字符串基础上<code>+1M</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis源码阅读系列文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实战-分布式锁的原理和实现</title>
      <link href="/2021/12/06/Redis%E5%AE%9E%E6%88%98-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/12/06/Redis%E5%AE%9E%E6%88%98-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>在日常工作中是经常会使用Redis锁，而我对Redis锁的认知也是不断变化的</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>基于Redis副本集群甚至是单实例的Redis，使用的简单的锁如下(此时的Key还是以业务事件命名的字符串)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func lock(key string,ttl int) bool &#123;</span><br><span class="line">    restul = redis.ExecuteCommand(&quot;SETNX key 1&quot;)</span><br><span class="line">    if result &#123;</span><br><span class="line">        redis.ExecuteCommand(&quot;EXPIRE key ttl&quot;)    </span><br><span class="line">    &#125;</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func unlock(key string) &#123;</span><br><span class="line">    redis.ExecuteCommand(&quot;DEL key&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显而易见的是，这个锁存在很多问题，</p><ul><li>加锁操作不是原子操作，lock函数设置key和设置过期时间之间可能会中断</li><li>不支持锁重入，即便是当前任务进程上锁后，也无法再次进行上锁。</li><li>锁超时没有解决，在锁超时的特定情况下，导致可能会释放其它进程的锁</li></ul><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>使用生成的唯一ID作为clientID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func lock(key string,ttl int) bool &#123;</span><br><span class="line">    result = redis.set(key,nx,client,ex,ttl) </span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func unlock(key string) &#123;</span><br><span class="line">    redis.del(key,client)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis源码阅读(一)：Redis源码结构概览</title>
      <link href="/2021/12/06/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80-Redis%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88/"/>
      <url>/2021/12/06/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80-Redis%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客是《极客时间》上《Redis源码剖析与实战》课程的学习笔记，同时也基于评论和Redis实际源码补充了一些个人的观点。代码基于Redis 5.0.13</p></blockquote><p>源码的阅读不要拘泥于细节，首先要对阅读项目有一个全面性的认识，有了全面性的认识之后，才能在具体阅读细节的时候承上启下，发觉更多隐藏的细节。</p><p>想要熟悉一个项目可以从两个方面入手，</p><ul><li>项目目录结构的组织</li><li>项目模块的划分</li></ul><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p>Redis 目录一共包含4个 <code>src</code>,<code>deps</code>,<code>tests</code>,<code>utils</code></p><h3 id="deps-目录"><a href="#deps-目录" class="headerlink" title="deps 目录"></a>deps 目录</h3><p><code>deps</code>目录是redis依赖的第三方库的目录，包含</p><ul><li><code>C语言</code>的客户端<code>hiredis</code></li><li><code>jemalloc</code>的内存分配器代码</li><li><code>linenoise</code>用来替代<code>readline</code></li><li><code>lua</code>相关代码</li></ul><h3 id="tests-目录"><a href="#tests-目录" class="headerlink" title="tests 目录"></a>tests 目录</h3><p>tests是Redis用来写测试函数的目录，主要包含</p><ul><li><code>unit</code>单元测试测试代码</li><li><code>cluster</code>集群功能测试代码</li><li><code>sentinel</code>哨兵功能测试代码</li><li><code>interation</code> 主从复制功能代码(话说为什么不是replica)<br>除了上面这些测试代码外，还有一些测试辅助工具<code>assets</code>,<code>helpers</code>,<code>modules</code>,<code>support</code></li></ul><h3 id="src目录"><a href="#src目录" class="headerlink" title="src目录"></a>src目录</h3><ul><li>Redis所有功能模块的代码</li><li><code>modules</code>目录包含目录模块代码</li></ul><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>辅助功能目录，<br><img src="/2021/12/06/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80-Redis%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88/1201638760793_.pic.jpg" alt="辅助功能代码"></p><h2 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h2><p>按照<code>服务器实例</code>,<code>数据库数据类型和操作</code>,<code>可靠性和可扩展性</code>,<code>辅助功能</code>四个唯独划分模块。</p><h3 id="服务器实例"><a href="#服务器实例" class="headerlink" title="服务器实例"></a>服务器实例</h3><ul><li><p>服务端程序的入口<code>main函数</code>所在的<code>server.h/server.c</code></p></li><li><p>服务端是一个网络程序，所以基于事件的网络驱动框架<code>ae.h/ae.c</code>,<code>ae_epoll.c</code>,<code>ae_evport.c</code>,<code>ae_kqueue.c</code>,<code>ae_select.c</code></p></li><li><p>底层<code>tcp</code>网络通信<code>anet.h/anet.c</code></p></li><li><p><code>客户端</code>实现<code>networking.c</code></p></li></ul><h3 id="数据库数据类型和操作"><a href="#数据库数据类型和操作" class="headerlink" title="数据库数据类型和操作"></a>数据库数据类型和操作</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><table><thead><tr><th>底层结构</th><th>对应数据类型</th><th>对应源文件</th></tr></thead><tbody><tr><td>SDS</td><td>String</td><td>sds.h/sds.c/sdsalloc.h</td></tr><tr><td>双向链表</td><td>List</td><td>adlist.h/adlist.c</td></tr><tr><td>压缩列表</td><td>List、Hash、Sorted Set</td><td>ziplist.h/ziplist.c</td></tr><tr><td>QuickList</td><td>List、Hash、Sorted Set</td><td>quicklist.h/quicklist.c</td></tr><tr><td>整数列表</td><td>Set</td><td>intset.h/intset.c</td></tr><tr><td>zipmap</td><td>Hash</td><td>zipmap.h/zipmap.c</td></tr><tr><td>哈希表</td><td>Hash,Sorted</td><td>dict.h/dict.c</td></tr><tr><td>HyperLoglog</td><td>HyperLogLog</td><td>hyperloglog.c</td></tr><tr><td>GetHash</td><td>Get</td><td>geo.h/get.c gethash.h/gethash.c geohash_helper.h/geohash_helper.c</td></tr><tr><td>位图</td><td>位图</td><td>bitops.c</td></tr><tr><td>Stream</td><td>时序数据</td><td>stream.h/stream.c</td></tr></tbody></table><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><ul><li>对数据库键值对的操作<code>db.c</code></li><li>内存分配，封装<code>tcmalloc</code>和<code>jemalloc</code>到<code>zmalloc.h/zmalloc.c</code></li><li>内存回收，过期key和过期策略<code>expire.c</code>，异步删除<code>lazyfree.c</code></li><li>数据替换的<code>LRU</code>和<code>LFU</code>算法<code>evict.c</code></li></ul><h3 id="高可用和高可扩展"><a href="#高可用和高可扩展" class="headerlink" title="高可用和高可扩展"></a>高可用和高可扩展</h3><h4 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h4><p><code>内存快照rdb</code>和<code>aof</code>的实现<code>rdb.h/rdb.c</code>和<code>aof.c</code>以及对应文件的完整性检测<code>redis-check-rdb.c</code>和<code>redis-check-aof.c</code></p><h4 id="主从复制功能实现"><a href="#主从复制功能实现" class="headerlink" title="主从复制功能实现"></a>主从复制功能实现</h4><p><code>主从复制</code>在<code>replication.c</code>中，所依赖的哨兵在<code>sentinel.c</code>中，<code>集群</code>在<code>cluster.h/cluster.c</code>中。</p><h3 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h3><p>运维分析不同操作延迟来源的<code>latency.h/latency.c</code>文件，慢日志<code>slowlog.h/slowlog.c</code>,性能测试<code>redis-benchmark.c</code></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>熟悉项目的目录结构可以帮助更好的阅读源码，一个中大型项目一般包含上千个源码文件，符合规范的项目会按照功能的不同把源码放在不同的文件目录中，通过了解项目的目录组织结构，可以对项目有一个大概的认知，如果同时提前对项目的模块和功能点有一定的了解更能事半功倍。</p><p>课程中关于数据结构和对应的数据类型可能有缺失，这里使用下面的留言记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">数据类型：</span><br><span class="line">- String（t_string.c、sds.c、bitops.c）</span><br><span class="line">- List（t_list.c、ziplist.c）</span><br><span class="line">- Hash（t_hash.c、ziplist.c、dict.c）</span><br><span class="line">- Set（t_set.c、intset.c）</span><br><span class="line">- Sorted Set（t_zset.c、ziplist.c、dict.c）</span><br><span class="line">- HyperLogLog（hyperloglog.c）</span><br><span class="line">- Geo（geo.c、geohash.c、geohash_helper.c）</span><br><span class="line">- Stream（t_stream.c、rax.c、listpack.c）</span><br><span class="line"></span><br><span class="line">全局：</span><br><span class="line">- Server（server.c、anet.c）</span><br><span class="line">- Object（object.c）</span><br><span class="line">- 键值对（db.c）</span><br><span class="line">- 事件驱动（ae.c、ae_epoll.c、ae_kqueue.c、ae_evport.c、ae_select.c、networking.c）</span><br><span class="line">- 内存回收（expire.c、lazyfree.c）</span><br><span class="line">- 数据替换（evict.c）</span><br><span class="line">- 后台线程（bio.c）</span><br><span class="line">- 事务（multi.c）</span><br><span class="line">- PubSub（pubsub.c）</span><br><span class="line">- 内存分配（zmalloc.c）</span><br><span class="line">- 双向链表（adlist.c）</span><br><span class="line"></span><br><span class="line">高可用&amp;集群：</span><br><span class="line">- 持久化：RDB（rdb.c、redis-check-rdb.c)、AOF（aof.c、redis-check-aof.c）</span><br><span class="line">- 主从复制（replication.c）</span><br><span class="line">- 哨兵（sentinel.c）</span><br><span class="line">- 集群（cluster.c）</span><br><span class="line"></span><br><span class="line">辅助功能：</span><br><span class="line">- 延迟统计（latency.c）</span><br><span class="line">- 慢日志（slowlog.c）</span><br><span class="line">- 通知（notify.c）</span><br><span class="line">- 基准性能（redis-benchmark.c）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis源码阅读系列文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言垃圾回收机制</title>
      <link href="/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/12/02/Go%E8%AF%AD%E8%A8%80%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言HTTP库Timeout详解</title>
      <link href="/2021/11/29/Go%E8%AF%AD%E8%A8%80HTTP%E5%BA%93Timeout%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/11/29/Go%E8%AF%AD%E8%A8%80HTTP%E5%BA%93Timeout%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/11/29/Go%E8%AF%AD%E8%A8%80HTTP%E5%BA%93Timeout%E8%AF%A6%E8%A7%A3/9271566-e301b12f6e352b36.webp" alt="hashtable"></p><p><img src="/2021/11/29/Go%E8%AF%AD%E8%A8%80HTTP%E5%BA%93Timeout%E8%AF%A6%E8%A7%A3/9271566-245b865db4e3dcc1.webp" alt="hashtable"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP-扩展合集</title>
      <link href="/2021/11/22/PHP-%E6%89%A9%E5%B1%95%E5%90%88%E9%9B%86/"/>
      <url>/2021/11/22/PHP-%E6%89%A9%E5%B1%95%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="zstd"><a href="#zstd" class="headerlink" title="zstd"></a>zstd</h3><p>facebook开源的一个压缩算法</p><h3 id="igbinary"><a href="#igbinary" class="headerlink" title="igbinary"></a>igbinary</h3><p>替代php原生序列化操作</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP头中的Trailer到底是干啥用的</title>
      <link href="/2021/11/02/HTTP%E5%A4%B4%E4%B8%AD%E7%9A%84Trailer%E5%88%B0%E5%BA%95%E6%98%AF%E5%B9%B2%E5%95%A5%E7%94%A8%E7%9A%84/"/>
      <url>/2021/11/02/HTTP%E5%A4%B4%E4%B8%AD%E7%9A%84Trailer%E5%88%B0%E5%BA%95%E6%98%AF%E5%B9%B2%E5%95%A5%E7%94%A8%E7%9A%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这一次认真了解一下Cookie</title>
      <link href="/2021/10/22/%E8%BF%99%E4%B8%80%E6%AC%A1%E8%AE%A4%E7%9C%9F%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8BCookie/"/>
      <url>/2021/10/22/%E8%BF%99%E4%B8%80%E6%AC%A1%E8%AE%A4%E7%9C%9F%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8BCookie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在看<code>Go</code>的<code>http</code>库的内容，有一个单独的<code>cookie.go</code>文件包含了Cookie相关的内容,平时使用过也因为面试特意学习过相关内容，但是没有系统的从设计到实现了解过，这次有时间特意学习了一下。</p></blockquote><h3 id="Cookie基于HTTP请求头实现"><a href="#Cookie基于HTTP请求头实现" class="headerlink" title="Cookie基于HTTP请求头实现"></a>Cookie基于HTTP请求头实现</h3><p><code>HTTP</code>是无状态协议，所以为了能够维持一个有状态的连接，出现了<code>Cookie</code>技术，<code>Cookie</code>技术并没有任何对<code>HTTP</code>协议的修改，在<code>HTTP协议</code>的规范范围内，通过添加一对<code>Cookie</code>和<code>Set-Cookie</code>的<code>HTTP头</code>实现连接状态的维护</p><p>以下摘自RFC6265的内容解释了<code>Cookie</code>技术使用的<code>请求头</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">To store state, the origin server includes a Set-Cookie header in an</span><br><span class="line">HTTP response.  In subsequent requests, the user agent returns a</span><br><span class="line">Cookie request header to the origin server.  The Cookie header</span><br><span class="line">contains cookies the user agent received in previous Set-Cookie</span><br><span class="line">headers.  The origin server is free to ignore the Cookie header or</span><br><span class="line">use its contents for an application-defined purpose.</span><br><span class="line"></span><br><span class="line">Origin servers MAY send a Set-Cookie response header with any</span><br><span class="line">response.  User agents MAY ignore Set-Cookie headers contained in</span><br><span class="line">responses with 100-level status codes but MUST process Set-Cookie</span><br><span class="line">headers contained in other responses (including responses with 400-</span><br><span class="line">and 500-level status codes).  An origin server can include multiple</span><br><span class="line">Set-Cookie header fields in a single response.  The presence of a</span><br><span class="line">Cookie or a Set-Cookie header field does not preclude HTTP caches</span><br><span class="line">from storing and reusing a response.</span><br><span class="line"></span><br><span class="line">Origin servers SHOULD NOT fold multiple Set-Cookie header fields into</span><br><span class="line">a single header field.  The usual mechanism for folding HTTP headers</span><br><span class="line">fields (i.e., as defined in [RFC2616]) might change the semantics of</span><br><span class="line">the Set-Cookie header field because the %x2C (&quot;,&quot;) character is used</span><br><span class="line">by Set-Cookie in a way that conflicts with such folding.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为了存储状态，源服务器在HTTP响应中包含了一个Set-Cookie头。在后续的请求中，user agent将回传一个Cookie请求头到源服务器。Cookie头包含了user agent在前面Set-Cookie头中包含的cookie。源服务器可以选择忽略Cookie头或将Cookie用于应用所定义的目的。</span><br><span class="line"></span><br><span class="line">源服务器可以在任何响应中发送Set-Cookie响应头。user agent可以在响应码为1xx的请求中忽略Set-Cookie，但必须在除此以外的任何种类响应中处理Set-Cookie（包括响应码为4xx和5xx的响应）。源服务器可以在单个请求的响应中包含多个Set-Cookie字段。Cookie或者Set-Cookie的出现不会阻止存储和复用HTTP请求的缓存。</span><br><span class="line"></span><br><span class="line">源服务器不应该把多个Set-Cookie字段打包到单个HTTP头中。通常打包HTTP头的字段可能会更改Set-Cookie字段的语义，因为%x2c(&quot;,&quot;)字符被Set-Cookie使用，从而在这种打包方式中存在冲突。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Cookie使用键值对方式传递数据，多个键值对内容应该分为多个Set-Cookied，单个Set-Cookie应该仅用于一个键值对内容的存储，因为在Cookie内除了自定义键值对内容外，还有一些metadata控制Cookie的作用域有效期等行为。</p><h4 id="在请求头内设置Cookie和SetCookie"><a href="#在请求头内设置Cookie和SetCookie" class="headerlink" title="在请求头内设置Cookie和SetCookie"></a>在请求头内设置Cookie和SetCookie</h4><p>使用Set-Cookie头，服务器可以向在一个HTTP响应中user agent发送一条短字符串，这条字符串会在未来符合cookie作用域的HTTP请求中回传给服务器。例如，服务器可以给user agent发送一个名叫“SID”的“session标识符”，值为 31d4d96e407aad42。user agent会在后续的请求中回传这个session标识符以及其值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">== Server -&gt; User Agent ==</span><br><span class="line"></span><br><span class="line">Set-Cookie: SID=31d4d96e407aad42</span><br><span class="line"></span><br><span class="line">== User Agent -&gt; Server ==</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Cookie: SID=31d4d96e407aad42</span><br></pre></td></tr></table></figure><h4 id="Cookie-的-metadata设置"><a href="#Cookie-的-metadata设置" class="headerlink" title="Cookie 的 metadata设置"></a>Cookie 的 metadata设置</h4><p>服务器可以使用Path和Domain属性变更cookie的作用域。例如，服务器可以委托user agent在每个path每个example.com的子域都返回cookie。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> == Server -&gt; User Agent ==</span><br><span class="line"></span><br><span class="line">Set-Cookie:SID=31d4d96e407aad42;Path=/;Domain=example.com</span><br><span class="line"></span><br><span class="line"> == User Agent -&gt; Server ==</span><br><span class="line"></span><br><span class="line">Cookie: SID=31d4d96e407aad42</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上面的例子中，在单个Set-Cookie头中设置Cookie的Path和Domain信息，这种约定控制Cookie作用域的属性称为metadata,而自定义的键值对信息是SID，这也是为什么建议一个Set-Cookie设置一个自定义属性的原因</p></blockquote><h4 id="多个Set-Cookie设置多个信息"><a href="#多个Set-Cookie设置多个信息" class="headerlink" title="多个Set-Cookie设置多个信息"></a>多个Set-Cookie设置多个信息</h4><p>下一个例子中，服务器可以在user agent中存储多个cookie。例如，服务器可以通过返回两个Set-Cookie字段，实现既存储一个session标识符，又存储用户的偏好语言。值得注意的是，服务器用Secure和HttpOnly属性来对更加敏感的session标识符提供额外的安全保护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> == Server -&gt; User Agent ==</span><br><span class="line"></span><br><span class="line">Set-Cookie: SID=31d4d96e407aad42; Path=/; Secure; HttpOnly</span><br><span class="line">Set-Cookie: lang=en-US; Path=/; Domain=example.com</span><br><span class="line"></span><br><span class="line"> == User Agent -&gt; Server ==</span><br><span class="line"></span><br><span class="line">Cookie: SID=31d4d96e407aad42; lang=en-US</span><br></pre></td></tr></table></figure><h4 id="设置过期时间和移除Cookie"><a href="#设置过期时间和移除Cookie" class="headerlink" title="设置过期时间和移除Cookie"></a>设置过期时间和移除Cookie</h4><p>注意上面的Cookie头包含了两个cookie，一个名叫SID，另一个为lang。如果服务器希望cookie在user agent的多个“会话“（sessions，例如，user agent重启之后）中持续存在，服务器可以在Expires属性中指定一个过期时间。注意，如果user agent的cookie存储超过它的定额或者用户手动删除了cookie的话，user agent可能会在过期时间到达之前删除cookie。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> == Server -&gt; User Agent ==</span><br><span class="line"></span><br><span class="line">Set-Cookie: lang=en-US; Expires=Wed, 09 Jun 2021 10:18:14 GMT</span><br><span class="line"></span><br><span class="line"> == User Agent -&gt; Server ==</span><br><span class="line"></span><br><span class="line">Cookie: SID=31d4d96e407aad42; lang=en-US</span><br></pre></td></tr></table></figure><p>最后，为了移除一个cookie，服务器要返回一个把过期时间设置在过去的Set-Cookie字段。服务器只有在Set-Cookie头中Path和Domain属性与创建cookie时相符时，才能成功删除cookie。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">== Server -&gt; User Agent ==</span><br><span class="line"></span><br><span class="line">Set-Cookie: lang=; Expires=Sun, 06 Nov 1994 08:49:37 GMT</span><br><span class="line"></span><br><span class="line">== User Agent -&gt; Server ==</span><br><span class="line"></span><br><span class="line">Cookie: SID=31d4d96e407aad42</span><br></pre></td></tr></table></figure><h3 id="语法解释"><a href="#语法解释" class="headerlink" title="语法解释"></a>语法解释</h3><h4 id="服务端Set-Cookie"><a href="#服务端Set-Cookie" class="headerlink" title="服务端Set-Cookie"></a>服务端Set-Cookie</h4><p>不正式地说，Set-Cookie响应头包含了名字叫做“Set-Cookie”并跟着的一个“:”以及一个cookie。每个cookie由一个name-value键值对打头，后面跟着0个或者多个attribute-value键值对。服务器不应该发送未能遵从下列语法的Set-Cookie头。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">set-cookie-header = &quot;Set-Cookie:&quot; SP set-cookie-string  </span><br><span class="line">                   ;Set-Cookie: 之后必须有空格，空格之后才是  </span><br><span class="line">                   ;具体的set-cookie-string    </span><br><span class="line"></span><br><span class="line">set-cookie-string = cookie-pair *( &quot;;&quot; SP cookie-av )  </span><br><span class="line">                   ;cookie-pair以及每个cookie-av  </span><br><span class="line">                   ;之间分隔符都是&quot;;&quot; SP(也就是分号加空格)  </span><br><span class="line"></span><br><span class="line">cookie-pair       = cookie-name &quot;=&quot; cookie-value   </span><br><span class="line"></span><br><span class="line">cookie-name       = token  </span><br><span class="line">                   ;token表示的是除了分隔符和CTLs以外的ASCII字符  </span><br><span class="line">                   ;分隔符包括:  </span><br><span class="line">                   ;小中大尖括号 &quot;(&quot;|&quot;)&quot;|&quot;[]&quot;|&quot;]&quot;|&quot;&#123;&quot;|&quot;&#125;&quot;|&quot;&lt;&quot;|&quot;&gt;&quot;  </span><br><span class="line">                   ;空格和水平制表符 SP | HT  </span><br><span class="line">                   ;逗号分号冒号引号问号等号 &quot;,&quot;|&quot;;&quot;|&quot;:&quot;|&quot;?&quot;|&quot;=&quot;|&quot;\&quot;&quot;  </span><br><span class="line">                   ;斜线: &quot;\&quot; | &quot;/&quot;  </span><br><span class="line">                   ;@: &quot;@&quot;  </span><br><span class="line"></span><br><span class="line">cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )</span><br><span class="line"></span><br><span class="line">cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E  </span><br><span class="line">                      ; ASCII字符中除了CTRL（控制字符, 空白符  </span><br><span class="line">                      ; 双引号, 逗号, 分号, 反斜线(\)  </span><br><span class="line"></span><br><span class="line">token             = &lt;token, defined in [RFC2616], Section 2.2&gt;  </span><br><span class="line"></span><br><span class="line">cookie-av         = expires-av / max-age-av / domain-av /  </span><br><span class="line">                    path-av / secure-av / httponly-av /  </span><br><span class="line">                    extension-av  </span><br><span class="line"></span><br><span class="line">expires-av        = &quot;Expires=&quot; sane-cookie-date  </span><br><span class="line"></span><br><span class="line">sane-cookie-date  = &lt;rfc1123-date, defined in [RFC2616], Section 3.3.1&gt;  </span><br><span class="line"></span><br><span class="line">max-age-av        = &quot;Max-Age=&quot; non-zero-digit *DIGIT  </span><br><span class="line">                      ; In practice, both expires-av and max-age-av  </span><br><span class="line">                      ; are limited to dates representable by the  </span><br><span class="line">                      ; user agent.  </span><br><span class="line"></span><br><span class="line">non-zero-digit    = %x31-39  </span><br><span class="line">                      ; digits 1 through 9  </span><br><span class="line"></span><br><span class="line">domain-av         = &quot;Domain=&quot; domain-value  </span><br><span class="line"></span><br><span class="line">domain-value      = &lt;subdomain&gt;  </span><br><span class="line">                      ; defined in [RFC1034], Section 3.5, as  </span><br><span class="line">                      ; enhanced by [RFC1123], Section 2.1  </span><br><span class="line"></span><br><span class="line">path-av           = &quot;Path=&quot; path-value  </span><br><span class="line"></span><br><span class="line">path-value        = &lt;any CHAR except CTLs or &quot;;&quot;&gt;  </span><br><span class="line"></span><br><span class="line">secure-av         = &quot;Secure&quot;  </span><br><span class="line"></span><br><span class="line">httponly-av       = &quot;HttpOnly&quot;  </span><br><span class="line"></span><br><span class="line">extension-av      = &lt;any CHAR except CTLs or &quot;;&quot;&gt;  </span><br></pre></td></tr></table></figure><p>set-cookie-string中由cookie-av项贡献的部分是被大家熟知的属性。为了最大化和user agent的兼容性，服务器不应该产生在set-cookie-string中有两个属性相同的名字的cookie</p><p>服务器不应该在同一个响应中包含超过一个具有相同cookie-name的Set-Cookie字段。</p><p>如果一个服务器向user agent并发地发送了多条包含Set-Cookie头的响应（例如，当在多个sockets上和user agent通信时），这些响应将会创造一个“竞争条件”，最终会导致不可预期的后果。</p><p>注意：一些现有的user agent对两位数的年份有不同的处理。为了避免兼容性问题，服务器应该使用要求四位数年份的RFC1123定义的日期格式。</p><p>注意：一些user agent会用32位的UNIX time_t来存储和处理日期。time_t相关的库的bug可能会导致这些user agent在2038年之后错误地处理日期。</p><h4 id="句法"><a href="#句法" class="headerlink" title="句法"></a>句法</h4><p>本节描述了简化的关于Set-Cookie头的语义。这些语义对于要理解最常见的服务器上cookie用法已经足够详细。</p><p>当user agent接收到一个Set-Cookie头时，user agent会将cookie及其属性一起存储。随后，当user agent发起HTTP请求时，user agent会在Cookie头中包含合适的并且没有过期的cookie。</p><p>如果user agent接收到了一个和某个现有cookie的cookie-name、domain-value和path-value都相同的新cookie，现有的那个cookie将会被驱逐，取而代之的是那个新cookie。注意服务器可以通过向user agent发送一个拥有值为过去某一时刻的Expires属性的新cookie，来删除一个cookie。</p><p>除非cookie的属性额外指定，cookie将只会回传到源服务器（例如，不会回传到任何子域上），并且cookie将会在当前会话结束时过期（会话由user agent自己定义）。user agent会忽略未被识别的cookie属性（但不会忽略整个cookie）。</p><h5 id="Expires属性"><a href="#Expires属性" class="headerlink" title="Expires属性"></a>Expires属性</h5><p>Expires属性指明了cookie的最大生命周期，形式为cookie过期的时刻。user agent并不被要求在设定的时间之前保留cookie。实际上，user agent经常由于存储压力或者隐私上的考虑驱逐了cookie。</p><h5 id="Max-Age属性"><a href="#Max-Age属性" class="headerlink" title="Max-Age属性"></a>Max-Age属性</h5><p>Max-Age属性指明了cookie的最大生命周期，形式为cookie过期之前的具体秒数。user agent并不被要求在这段指定的时长内保留cookie。实际上，user agent经常由于存储压力或者隐私上的考虑驱逐了cookie。</p><p>注意：某些现有的user agent并不支持Max-Age属性。不支持Max-Age属性的user agent将会直接忽略。</p><p>如果cookie既有Max-Age也有Expires属性，Max-Age属性将会有更高的优先级，并且控制cookie的过期时间。如果一个cookie既没有Max-Age也没有Expires属性，user agent将会在本次会话（会话由user agent定义）结束之前保留这个cookie。</p><h5 id="Domain属性"><a href="#Domain属性" class="headerlink" title="Domain属性"></a>Domain属性</h5><p>Domain属性指明了cookie会被发送到哪些host。例如，如果某cookie的Domain属性的值为”example.com”，user agent将会在向example.com,<a href="http://www.example.com以及www.corp.example.com（注意，最前面的%x2E(&quot;.&quot;)">www.example.com以及www.corp.example.com（注意，最前面的%x2E(&quot;.&quot;)</a>, 如果出现，将会被忽略，尽管它除了出现在末尾以外都是非法的）发送HTTP请求时，在Cookie头中包含该cookie。如果服务器漏掉了这个Domain属性，user agent只会向源服务器返回cookie。</p><p>警告：某些现存的user agent会将不存在Domain属性时，错误地假设为Domain属性存在，并且值为当前的host name。例如，如果example.com返回了一个没有Domain属性的Set-Cookie头，这些user agent将会错误地也向<a href="http://www.example.com发送cookie./">www.example.com发送cookie。</a></p><p>user agent将会拒绝cookie，除非Domain属性为cookie指定的作用域会包含源服务器。例如，user agent将会接受一段来自“foo.example.com”的Domain属性为”example.com”或者”foo.example.com”的cookie，但是user agent不会接受Domain属性为”bas.example.com”或者”baz.foo.example.com”的cookie。</p><p>注意：出于安全的原因，许多user agent被设定为拒绝Domain属性对应为”公共结尾”的cookie。例如，一些user agent将会拒绝Domain属性为”com”或”co.uk”等。（详见5.3节）</p><h5 id="Path属性"><a href="#Path属性" class="headerlink" title="Path属性"></a>Path属性</h5><p>每个cookie的作用域被限定到了由path组成集合中，由Path属性控制。如果服务器没有提供Path属性，user agent将会使用当前的require-uri中path元素的“目录”作为默认值（更多细节详见5.1.4节）</p><p>user agent会在一次HTTP请求中包含该cookie，条件是require-uri中路径的部分匹配Path属性（或者是Path的子目录），其中%x2F(“/“)被解释为路径分隔符。</p><p>虽然这看起来对分隔同一host中不同路径的cookie十分实用，但是Path属性不能作安全的凭据。（见第8节）</p><h5 id="Secure属性"><a href="#Secure属性" class="headerlink" title="Secure属性"></a>Secure属性</h5><p>Secure属性将cookie的作用域限定到“安全的”传输途径（“安全的”是有user agent所定义的）。当一个cookie拥有Secure属性时，user agent只有在请求是从一个安全的传输途径（典型的是以TLS方式传输HTTP，也就是HTTPS，RFC2818）传输时，才会发送该cookie。</p><p>尽管这看起来对保护cookie以免受中间人攻击很有用，但是Secure属性只在机密性上保护了cookie。一个网络中间攻击者可以通过非安全的传输途径覆盖该cookie，从而破坏其完整性。（详见8.6节）</p><h5 id="HttpOnly属性"><a href="#HttpOnly属性" class="headerlink" title="HttpOnly属性"></a>HttpOnly属性</h5><p>HttpOnly属性将cookie的作用域限制到HTTP请求中。尤其是，这个属性委托user agent在提供非HTTP方式访问cookie时（例如，浏览器提供给脚本访问cookie的接口），忽略该cookie。</p><h4 id="Cookie语法"><a href="#Cookie语法" class="headerlink" title="Cookie语法"></a>Cookie语法</h4><p>user agent会将存储的cookie放在Cookie头中发送给源服务器。如果服务器遵从4.1中的要求（并且user agent遵从第5节的要求），user agent将会发送符合下述语法的Cookie头部：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cookie-header = &quot;Cookie:&quot; OWS cookie-string OWS  </span><br><span class="line"></span><br><span class="line">cookie-string = cookie-pair *( &quot;;&quot; SP cookie-pair )  </span><br></pre></td></tr></table></figure><p>每个cookie键值对都表述了一个被user agent保存的cookie。cookie键值对包括从Set-Cookie头中接收到的的cookie-name和cookie-value。</p><p>注意cookie的属性没有被返回。尤其是，服务器不能单靠Cookie头部就能确定，什么时候cookie会过期，cookie对哪些host有效，对什么路径有效，还有cookie是否设置了Secure或者HttpOnly属性。</p><p>每个单独的cookie的语义没有在该文档中定义。服务器被期望以应用相关地语义来填充cookie。</p><p>虽然cookie在Cookie头中被线性地序列化，但是服务器不应该依赖序列化的顺序。尤其是，当Cookie头中包含了两个具有相同名字的cookie时（例如，被设置成不同Path或者Domain属性但拥有相同名字的cookie），服务器不应该依赖这些cookie在头部中出现的顺序。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异或操作的解析</title>
      <link href="/2021/10/20/XOR%E6%93%8D%E4%BD%9C%E7%9A%84%E5%BA%95%E5%B1%82%E8%BF%87%E7%A8%8B/"/>
      <url>/2021/10/20/XOR%E6%93%8D%E4%BD%9C%E7%9A%84%E5%BA%95%E5%B1%82%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>平时提到 <code>2 ^ 3</code> 之类的操作，我们很容易联想到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0000 0010</span><br><span class="line">0000 0011 (xor)</span><br><span class="line">---------------</span><br><span class="line">0000 0001</span><br></pre></td></tr></table></figure><p>最后得到的结果是<code>1</code></p><p>但是如果是<code>2 ^ -3</code> 那结果是什么呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0000 0011 (原码)</span><br><span class="line">1000 0010 (原码)</span><br><span class="line"></span><br><span class="line">变为</span><br><span class="line"></span><br><span class="line">0000 0011 (补码)</span><br><span class="line">1111 1110 (补码) (xor)</span><br><span class="line">-----------------</span><br><span class="line">1111 1101 (补码)  </span><br><span class="line"></span><br><span class="line">变为</span><br><span class="line"></span><br><span class="line">1000 0011 (原码)</span><br><span class="line"></span><br><span class="line">最后得到结果是-3</span><br></pre></td></tr></table></figure><p>可以看出计算机在进行计算的时候，实际是以数字的<code>补码</code>形式进行操作</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>504Gateway-Timeout啥情况</title>
      <link href="/2021/10/19/Nginx%E6%8A%A5504Gateway-Timeout/"/>
      <url>/2021/10/19/Nginx%E6%8A%A5504Gateway-Timeout/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言Slice详解</title>
      <link href="/2021/10/14/Go%E8%AF%AD%E8%A8%80Slice%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/10/14/Go%E8%AF%AD%E8%A8%80Slice%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis-SortedSet底层结构剖析</title>
      <link href="/2021/09/28/Redis%E4%B8%ADSortedSet%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84%E5%89%96%E6%9E%90/"/>
      <url>/2021/09/28/Redis%E4%B8%ADSortedSet%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="悲催时刻"><a href="#悲催时刻" class="headerlink" title="悲催时刻"></a>悲催时刻</h1><p>又又又去面试了，面试官问了一个有序集合底层的数据结构是什么？我想可能很多没有细致了解Redis源码的同学听的最多的就是<code>跳表</code>这个数据结构了，所以我脱口而出跳表，然后面试官很坏，他问了一个给我说一下<code>ZSCORE</code>的时间复杂度，我就在心里默默的计算，岂不是<code>O(n)</code>吗？然后面试官笑笑不说话，结果可相知，我又又又挂了。</p><h1 id="亡羊补牢"><a href="#亡羊补牢" class="headerlink" title="亡羊补牢"></a>亡羊补牢</h1><p>然后我当然又去恶补了一下Redis一些基础知识，此时才知道当时的自己多么的浅薄。这次主要说Redis的Sorted Set数据类型，其他的等我下次面试再挂了再来跟大家说吧。</p><h2 id="Redis的基础结构"><a href="#Redis的基础结构" class="headerlink" title="Redis的基础结构"></a>Redis的基础结构</h2><p>Redis是一个键值对数据库，所以Redis数据库底层存储键值对的结构是哈希表，Redis中有一个<code>struct</code>类型是<code>dicht</code>就是一个对hash表的封装，Redis使用一个MurMurHash(我不知道你们怎么记忆，我记忆的方式特恶心，muamuahash亲亲hash)来寻找每个key在哈希表中的位置，然后用链表法解决哈希冲突(顺便说一下，链表法每次都是把新的元素放在开头的位置)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictht &#123;</span><br><span class="line">    // table是一个数组的二级指针，就是每个哈希表结构必备的数组结构</span><br><span class="line">    dictEntry **table;</span><br><span class="line">    // size 是上面那个数组的长度</span><br><span class="line">    unsigned long size;</span><br><span class="line">    // 这个用来算根据hash函数生成的数组在数组索引位置的掩码</span><br><span class="line">    unsigned long sizemask;</span><br><span class="line">    // 这个表用了多少</span><br><span class="line">    unsigned long used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><p>但是实际Redis中不直接使用dictht这个结构，而是使用了进一步封装的<code>dict</code>这个结构体，用来进行渐进式reshah的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dict &#123;</span><br><span class="line">    // 类型，定义了不同类型的不同的一堆构造函数之类的方法，用来对不同的type的hash的value进行操作</span><br><span class="line">    dictType *type;</span><br><span class="line">    // 传给上面方法的参数</span><br><span class="line">    void *privdata;</span><br><span class="line">    // 刚才说的结构体，注意有俩ht[0] 和ht[1]</span><br><span class="line">    dictht ht[2];</span><br><span class="line">    // 进行rehash的时候索引</span><br><span class="line">    long rehashidx; /* rehashing not in progress if rehashidx == -1 */</span><br><span class="line">    // 正在安全运行的迭代器的数量? 这个还在看</span><br><span class="line">    unsigned long iterators; /* number of iterators currently running */</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><p>上面的ht是一个数组，包含两个哈希表，也就是上面的<code>dicht</code>结构，数组内的元素都是<code>dictEntry</code>,<code>dictEntry</code>包含了<code>key</code>和<code>v</code>两个关键属性，一般情况下他们都是<code>RedisObject</code>结构体，<code>RedisObject</code>用来表示全部的5种数据结构，通过<code>type</code>来进行区分，同时我们知道我们熟知的5个redis数据结构很多都有两个实现的底层数据结构，通过<code>encoding</code>字段来区分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisObject &#123;</span><br><span class="line">    // 类型 4 位置 在3.0的版本里，包含REDIS_STRING REDIS_LIST REDIS_HASH REDIS_SET REDIS_ZSET</span><br><span class="line">    unsigned type:4;</span><br><span class="line">    // 编码方式 在Redis里，一种类型可能包含多个编码方式，例如Set就是HASH表或者是上面的dict 通过这个encoding来识别不同的编码方式</span><br><span class="line">    unsigned encoding:4;</span><br><span class="line">    // LRU算法的</span><br><span class="line">    unsigned lru:LRU_BITS; </span><br><span class="line">    // 引用计数</span><br><span class="line">    int refcount;</span><br><span class="line">    // 指向实际的底层结构</span><br><span class="line">    void *ptr;</span><br><span class="line">&#125; robj;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef struct dictEntry &#123;</span><br><span class="line">    void *key;</span><br><span class="line">    union &#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        int64_t s64;</span><br><span class="line">        double d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    struct dictEntry *next;    </span><br><span class="line">    void *metadata[];          </span><br><span class="line">&#125; dictEntry;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Sorted-Set的结构"><a href="#Sorted-Set的结构" class="headerlink" title="Sorted Set的结构"></a>Sorted Set的结构</h2><p>说了那么多,和题目也没啥关系啊？其实不是的，在<code>RedisObject</code>中，如果<code>zset</code>的<code>encoding</code>字段表示<code>zset</code>的编码形式是跳表的结构的话，其实对应的redisObject的ptr指向的数据结构是下面这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct zset &#123;</span><br><span class="line">    dict *dict;</span><br><span class="line">    zskiplist *zsl;</span><br><span class="line">&#125; zset;</span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>是一个哈希表和一个跳表，所以执行<code>zscore</code>的时候不用遍历跳表的<code>level0</code>的全部元素，直接使用hash表进行定位就可以,时间复杂度是<code>O(1)</code></p>]]></content>
      
      
      <categories>
          
          <category> Redis底层结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Int类型的取值范围</title>
      <link href="/2021/09/27/Int%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/"/>
      <url>/2021/09/27/Int%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="悲催时刻"><a href="#悲催时刻" class="headerlink" title="悲催时刻"></a>悲催时刻</h1><p>面试的时候，被问到 MySQL Int 类型的取值范围，一开始寻思问的不会是宽度的设置吧，最后真的竟然是问取值范围，MySQL的Int是32位的，那32位的Int类型的取值范围是多少呢？一时间我竟然有些恍惚，每次看到int8的取值范围我们的肌肉记忆就会告诉我们是<code>[-128,127]</code>，但是为啥是这个取值范围呢？我掐指一算，不应该是<code>[-127,127](注意，这个是错误的！！！)</code>吗？<br>第一位是符号位置，所以<code>[0111,1111]</code>是<code>127</code>，<code>[1111,1111]</code>是<code>-127</code>岂不是爽歪歪？结果正确的答案是<code>[-128,127]</code>，我就不知道你怎么给老子存<code>-128</code></p><p>结果可想而知，我又挂了</p><h1 id="亡羊补牢"><a href="#亡羊补牢" class="headerlink" title="亡羊补牢"></a>亡羊补牢</h1><p>为了熟练掌握这个基础知识，我又又又一次开始Google，终于有一定的理解，计算机里带符号类型的整数都是使用一种称为<code>补码</code>的方式存储的，为啥呢？因为CPU内部的哪些乱七八糟的门电路什么的，费老大劲才能组成一个<code>全加器</code>用来对两个数进行加法运算，结果你给老子来个减法？所以为了减少复杂数字电路的设计，复用<code>全加器</code>，出现了<code>原码</code>、<code>反码</code>和<code>补码</code>的概念，要有一个概念就是符号整数在内存里都是补码存储的，便于运算.</p><h2 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h2><p><code>原码</code> 就是我们学习和理解的符号整形的二进制表示方式，例如<code>-3</code>用<code>[1000,0011]</code>表示，<code>+3</code>用<code>[0000,0011]</code>表示</p><p><code>反码</code> 正数的反码和原码一样，负数的反码是<code>符号为不变,其余位取反</code>，所以 <code>+3</code> 的反码还是<code>[0000,0011]</code>，<code>-3</code>的反码是[1111,1100],</p><p><code>补码</code> 正数的补码和原码一样，负数的补码是<code>符号为不变,其余位取反后+1</code>，所以 <code>+3</code> 的补码还是<code>[0000,0011]</code>，<code>-3</code>的补码是[1111,1101]</p><h2 id="CPU-符号整数的加减法的计算"><a href="#CPU-符号整数的加减法的计算" class="headerlink" title="CPU 符号整数的加减法的计算"></a>CPU 符号整数的加减法的计算</h2><p>上面我们说过，为了复用<code>加法器</code>，我们需要把<code>减法</code>干掉，恰好我们有一个定理是<code>1-1 = 1+(-1)</code>，哈哈哈，怎么样，这不就把减法<br>干掉了吗？我们来试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 + (-3) = [0000,0011](原) + [1000,0011](原) = [1000,0110](原) = -6 </span><br></pre></td></tr></table></figure><p>错的离谱，符号为参与运算，错的不能再错了，难道再设计个电路专门处理符号位？这也太蠢了，我们用新技能<code>反码</code>试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 + (-3) = [0000,0011](反) + [1111,1100](反) =  [1111,1111](反) = [1000,0000](原) = -0 </span><br></pre></td></tr></table></figure><p>bingo! 答对了，但是 [1000,0000] 是 <code>-0</code> 难道[0000,0000]是<code>+0</code>吗？<code>+0</code>和<code>-0</code>怕不是不相等吧，所以我们再用另一个新技能<code>补码试试</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 + (-3) = [0000,0011](补) + [1111,1101](补) = &#123;1&#125;[0000,0000](补) = [1000,0000](原) = 0 </span><br></pre></td></tr></table></figure><p><code>补码</code>有点神奇啊，竟然溢出了一个位置，咋办，难不成把前面哪个数据的内存给偷摸的改了? 其实不是，加法器会丢弃溢出的位置，符号为的新值作为符号的判定，所以上面是[0000,0000] 是 0</p><p>这个例子不好，我们换一个再试一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-127 - 1 = (-127) + (-1) = [1000,0001](补) + [1111,1111](补) = &#123;1&#125;[1000,0000](补) = [1000,0000](原) </span><br></pre></td></tr></table></figure><p>点子不好，咋又溢出了，我们把它按照惯丢掉，变成了<code>[1000,0000]</code>，你大爷的，<code>-0</code>你怎么又来了，结果不应该是<code>-128</code>吗，所以大家一生气，让[1000,0000]就代表<code>-128</code>吧，所以在<code>补码</code>表示中[1000,0000]就代表了(-128),原先的<code>-0</code>没了，但是<code>+0</code>还在,所以Int(8)的取值范围就是[1000,0000] 到 [0111,1111] 也就是<code>[-128,127]</code></p><p>上面的都是点子背，我们弄一个正常的来算一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">12 - 9 = [0000,1100](补) + [1111,0111](补) = &#123;1&#125;[0000,0011](补) = [0000,0011](原) = 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也是正确的</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>所以我们得到一个规律，一个符号整数的取值范围和他所占用的位数的n的关系为 <code>[-(2^(n-1)),2^(n-1)-1]</code>, MySQL Int 类型的位数是32位置，所以MySQL Int的取值范围是 <code>[-(2^(32-1)),2^(32-1)-1]</code> 是 <code>[-2 147 483 648,2 147 483 647]</code></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法训练营-五毒刷题法</title>
      <link href="/2021/09/26/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E4%BA%94%E6%AF%92%E5%88%B7%E9%A2%98%E6%B3%95/"/>
      <url>/2021/09/26/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5-%E4%BA%94%E6%AF%92%E5%88%B7%E9%A2%98%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="悲催进行时"><a href="#悲催进行时" class="headerlink" title="悲催进行时"></a>悲催进行时</h1><p>之前去面试某音乐平台，最后一个算法题，贼简单，链表回文字符串，结果个人因为太紧张，思路阻塞，最终没有做出来，面试也挂了，其实这个题目我做过，而且我还记得思路，快慢指针法，但是实际做的时候，很多边界问题和奇偶问题又让我变得不知所措，所以后来看了算法训练营的大哥的课程，感觉收获颇丰，所以在此记录我的刷题记录和刷题大法。</p><h1 id="精通一门知识的技巧"><a href="#精通一门知识的技巧" class="headerlink" title="精通一门知识的技巧"></a>精通一门知识的技巧</h1><p>授人以鱼，不如授人以渔，这门课的第一个最大的收获是自信，就是其实天才没有那么多，很多算法题你看起来没有任何思路是正常的，大神有时候也是毫无思路，所以不要因为一个题目毫无思路就自我否定觉着自己是不是不适合做一名开发工程师。<br>其次的收获就是精通一门知识的技巧</p><h2 id="Chunk-It-Up"><a href="#Chunk-It-Up" class="headerlink" title="Chunk It Up"></a>Chunk It Up</h2><p>拆分知识点，算法知识浩如烟海，如果零散的学习，不对知识点进行归纳和拆分，最后不能形成解题的套路，那学习带来的成效就不大，所以不单单对算法，对任何一门知识，都应该把他们拆分成小的知识点，然后攻克这些小的知识点，最后连点成线，全面掌握一门知识。</p><h2 id="Deliberate-Practcing"><a href="#Deliberate-Practcing" class="headerlink" title="Deliberate Practcing"></a>Deliberate Practcing</h2><p>刻意练习，前面说面试的时候，明明做过的题，结果没有做出来，其实就是因为当时做了一次之后，只记了一个大概的解题方式，没有了解每一步的细节的处理，也就是所谓的眼高手低，最终没能做出这道题目。所以扎实才是算法攻克的最佳实践，刻意练习是扎实掌握算法解题细节的不二法门，所谓刻意练习，老师总结一个五毒刷题法，我自己修改理解后整理为，对每一道题，至少要进行5遍的刻意练习，而且根据遗忘曲线，五遍练习需要分散在人类遗忘曲线的关键点上，我借助一些手机上遗忘曲线的APP，对每一道我做过的题目进行管理，分为首次练习、次日、一周后、一个月后、90天后进行题目的刻意训练。通过多次的刻意训练，真正掌握解题思路和方法。</p><h2 id="FeedBack"><a href="#FeedBack" class="headerlink" title="FeedBack"></a>FeedBack</h2><p>反馈，这个是我觉着最重要的一点，也是解题思路和套路形成的最关键的点，有些题目可能大家看了答案能够在当时机械化的翻译写出答案，但是实际上没有理解这个题目的实际意义，所以通过查看解答，获取的反馈尤其重要，除了了解怎么做，更重要的是了解为什么这样做。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>接下来会把践行的过程也同步的发出来，写字太麻烦了啊啊啊</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="算法训练营系列文章"><a href="#算法训练营系列文章" class="headerlink" title="算法训练营系列文章"></a>算法训练营系列文章</h2><p>文章内容主要记录实际接触的算法的解题过程和具体的解题代码，用于加强记忆。根据对自己的观察，发现图片和动画的讲解可能更助于自己理解算法的运行过程，所以如果评价对算法的掌握熟练度不够，会通过IPAD画图的方式进行理解，同时图片会加入算法训练营系列文章</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>一开始想要每次都记录自己的复习过程，但是发现这个过程很复杂，所以移除这部分记录，通过记忆训练软件记录做过的题目<br>通过github.com进行解题过程和详细记录，不在blog进行凑字数<br><a href="https://github.com/onnoink/leetcode-golang">GitHub地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 学习方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大家好</title>
      <link href="/2021/09/26/%E5%A4%A7%E5%AE%B6%E5%A5%BD/"/>
      <url>/2021/09/26/%E5%A4%A7%E5%AE%B6%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<p>断断续续用Hexo + Github Pages 功能搭建了N次这个博客了，每次都是无疾而终，希望这次的能持续的坚持下去</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
